{"version":3,"sources":["webpack:///./src/pages/search.tsx"],"names":["pageQuery","Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","indexOf","id","className","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length"],"mappings":"2FAAA,sIAgFaA,GAhFb,UAgFyB,cAqBVC,UAtFA,SAACC,GACd,IAAMC,EAAQD,EAAME,KAAKC,kBAAkBC,MADN,EAEXC,mBAAS,IAA5BC,EAF8B,KAEvBC,EAFuB,OAGCF,oBAAS,GAAxCG,EAH8B,KAGjBC,EAHiB,KAK/BC,EAAgBT,EAAMU,QAAO,SAACC,GAAc,IACxCC,EAASD,EAATC,KACAC,EAAiCD,EAAjCC,YAAaC,EAAoBF,EAApBE,gBACbC,EAAUF,EAAVE,MACFC,EAAaX,EAAMY,oBAEzB,OAAKV,GAAeO,EAAgBG,oBAAoBC,QAAQF,IAAe,GAIxED,EAAME,oBAAoBC,QAAQF,IAAe,KAG1D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKD,MAAM,WACX,yBAAKI,GAAG,UACN,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAIC,KAAMC,MACV,2BACEC,KAAK,OACLC,KAAK,SACLL,GAAG,cACHd,MAAOA,EACPoB,YAAY,SACZC,aAAa,MACbC,WAAS,EACTC,SAAU,SAACC,GACTvB,EAASuB,EAAEC,cAAczB,UAG7B,yBAAKe,UAAU,iBACb,0BACEW,MAAO,CAAEC,QAASzB,EAAc,GAAM,KACtC0B,QAAS,WACPzB,GAAe,KAHnB,YAQA,0BACEuB,MAAO,CAAEC,QAAUzB,EAAoB,IAAN,IACjC0B,QAAS,WACPzB,GAAe,KAHnB,sBAWO,KAAVH,GAAiBI,EAAcyB,OAAgE,KAAvD,0BAAMd,UAAU,aAAhB,qBACzC,kBAAC,IAAD,CAAUpB,MAAiB,KAAVK,EAAeL,EAAQS","file":"component---src-pages-search-tsx-26a1fc9ad5d659964844.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport { graphql } from 'gatsby';\r\nimport PostList from '../components/PostList';\r\nimport './styles/search.scss';\r\n\r\nexport interface SearchProps {\r\n  data: any;\r\n}\r\n\r\nconst Search = (props: SearchProps) => {\r\n  const posts = props.data.allMarkdownRemark.edges;\r\n  const [value, setValue] = useState('');\r\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\r\n\r\n  const filteredPosts = posts.filter((post: any) => {\r\n    const { node } = post;\r\n    const { frontmatter, rawMarkdownBody } = node;\r\n    const { title } = frontmatter;\r\n    const lowerValue = value.toLocaleLowerCase();\r\n\r\n    if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().indexOf(lowerValue) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return title.toLocaleLowerCase().indexOf(lowerValue) > -1;\r\n  });\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Search\" />\r\n      <div id=\"Search\">\r\n        <div className=\"search-inner-wrap\">\r\n          <div className=\"input-wrap\">\r\n            <Fa icon={faSearch} />\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"searchInput\"\r\n              value={value}\r\n              placeholder=\"Search\"\r\n              autoComplete=\"off\"\r\n              autoFocus\r\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\r\n                setValue(e.currentTarget.value);\r\n              }}\r\n            />\r\n            <div className=\"search-toggle\">\r\n              <span\r\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\r\n                onClick={() => {\r\n                  setIsTitleOnly(true);\r\n                }}\r\n              >\r\n                in Title\r\n              </span>\r\n              <span\r\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\r\n                onClick={() => {\r\n                  setIsTitleOnly(false);\r\n                }}\r\n              >\r\n                in Title+Content\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\r\n          <PostList posts={value === '' ? posts : filteredPosts} />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          rawMarkdownBody\r\n          excerpt(format: PLAIN)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMM DD, YYYY\")\r\n            title\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Search;\r\n"],"sourceRoot":""}